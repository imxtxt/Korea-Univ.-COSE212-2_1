{
  (fun x -> x); [true; false; true; true] => false;
  (fun x -> x); [true; true; true; true] => true;
  (fun x -> x); [true] => true;
  (fun x -> not x); [false; false] => true;
  (fun x -> x + 1 > x); [1; 4; 7] => true;
  (fun x -> x > 0); [1; 2; 3; 4; 5; 6] => true;
  (fun x -> x > 0); [1; 2; 3; 4; 5; 0] => false;
  (fun (a, b) -> a + b > 10) [(2, 9); (5, 7); (4, 3)] => false;
  (fun (a, b) -> a + b > 10) [(2, 9); (5, 7); (10, 3)] => true;
  (fun x -> forall (fun x -> x > 0) x); [[1; 2; 3]; [1; 4; 9]; [2; 5]; [8; 10; 4; 0]] => false;
  (fun x -> forall (fun x -> x > 0) x); [[1; 2; 3]; [1; 4; 9]; [2; 5]; [8; 10; 4]] => true;
  (fun f -> f 1 = f 2); [(fun x -> x); (fun x -> x + 1)] => false;
  (fun f -> f 1 = f 2); [(fun x -> 0); (fun x -> 1)] => true;
  (fun f -> f 1 = f (-1)); [(fun x -> x); (fun x -> x + 1)] => false;
  (fun f -> f 1 = f (-1)); [(fun x -> if x >= 0 then x else -x); (fun x -> x * x)] => true;
  (fun x -> let rec len l = match l with [] -> 0 | _::tl -> 1 + len tl in len x = 10); [[1; 2; 3]; [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]] => false;
  (fun x -> let rec len l = match l with [] -> 0 | _::tl -> 1 + len tl in len x = 10); [[1; 2; 3; 4; 5; 6; 7; 8; 9; 10]] => true;
  (fun x -> let f x = if x < 0 then -1 else 1 in f (x - 1) = f (x + 1)); [1; 2; 3] => true;
  (fun x -> let f x = if x < 0 then -1 else 1 in f (x - 1) = f (x + 1)); [0; 1; 2] => false;
  (fun x -> let f x = if x < 0 then -1 else 1 in f (x - 1) = f (x + 1)); [-2; -3] => true;
}