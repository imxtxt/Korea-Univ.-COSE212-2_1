{
	(0, fun x -> x*3) ; 3 => 3;
  (100, fun x -> x) ; 50 => 50;
  (14, fun x -> x+10) ; 10 => 150;
  (5, fun x-> -x) ; 50 => -50;
  (2, fun x -> -x) ; 1000 => 1000;
  (3, fun x -> x*x) ; 2 => 256;
  (200, fun x -> 2+x) ; 0 => 400;
  (5, fun x -> x*5) ; 10 => 31250;
  (0, fun x->x mod 7) ; 8 => 8;
  (1, fun x->x mod 7) ; 27 => 6;
  (5, fun x->x mod 6) ; (-35) => -5;
  (5, fun x -> x/10) ; 1234500 => 12;
  (10, fun x -> x+1) ; 50 => 60;
  (1, fun x -> (x*(x-1)) mod (x mod 23)) ; 44987 => 12;
  (3, fun x -> let rec f x = if (x=0) then 0 else x+(f (x-1)) in f x) ; 10 => 1186570;
  (0, fun x -> match x with |0 -> 0 |_ -> 3) ; 444 => 444;
  (1, fun x -> if x > 0 then -x else x) ; (-123) => (-123);
  (2, fun x -> 1000/x) ; 2 => 2;
  (3, fun x -> 1000/x) ; 7 => 142;
  (2, fun x -> x * x * x) ; 2 => 512; 
}
