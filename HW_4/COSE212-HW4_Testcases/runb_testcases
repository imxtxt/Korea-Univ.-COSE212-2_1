{
  (ADD (NUM 1, TRUE)) => raise UndefinedSemantics | Failure "arithmetic operation type error";
  (IF (NUM 1, NUM 2, NUM 3)) => raise UndefinedSemantics;
  (LETV ("x", NUM 1, ASSIGNF (VAR "x", "x", NUM 3))) => raise UndefinedSemantics;
  (LETV ("x", NUM 1, ASSIGNF (RECORD [("y", NUM 2)], "x", NUM 3))) => raise UndefinedSemantics | Failure "field x is not included in record";
  (LETV ("x", NUM 1, ASSIGNF (RECORD [("x", NUM 2)], "x", NUM 3))) => Num 3;
  (IF(EQUAL(ADD(NUM 1,NUM 3),DIV(NUM 12,SUB(NUM 4,NUM 1))),TRUE,FALSE)) => Bool true;
  (LETV("ret",NUM 1,LETV("n",NUM 5,SEQ(WHILE(LESS(NUM 0,VAR "n"),SEQ(ASSIGN("ret",MUL(VAR "ret",VAR "n")),ASSIGN("n",SUB(VAR "n",NUM 1)))),VAR "ret")))) => Num 120;
  (LETF("f",["x"],ADD(VAR "y",NUM 1),LETV("y",NUM 1,CALLR("f",["y"])))) => raise UndefinedSemantics | Failure "Variable y is not included in environment";
  (LETF("f",["x1";"x2"],SEQ(ASSIGN("x1",NUM 3),ASSIGN("x2",NUM 3)),LETV("x1",NUM 1,LETV("x2",NUM 1,SEQ(CALLV("f",[VAR "x1";VAR "x2"]),ADD(VAR "x1",VAR "x2")))))) => Num 2;
  (LETF("f",["x1";"x2"],SEQ(ASSIGN("x1",NUM 3),ASSIGN("x2",NUM 3)),LETV("x1",NUM 1,LETV("x2",NUM 1,SEQ(CALLR("f",["x1";"x2"]),ADD(VAR "x1",VAR "x2")))))) => Num 6;
  (LETF("f",["x1";"x2"],ADD(VAR "x1",VAR "x2"),CALLV("f",[NUM 1;VAR "x1"]))) => raise UndefinedSemantics | Failure "Variable x1 is not included in environment";
  (LETV("x",NUM 1,LETV("y",NUM 2,LETF("f",["x1";"x2"],SEQ(SEQ(ASSIGN("x1",MUL(VAR "x1",NUM 2)),ASSIGN("x2",ADD(VAR "x2",NUM 2))),ADD(VAR "x1",VAR "x2")),SEQ(CALLR("f",["x";"y"]),LETV("r",ADD(VAR "x",VAR "y"),ADD(VAR "r",CALLV("f",[VAR "x";VAR "y"])))))))) => Num 16;
  (LETV("n",NUM 5,LETV("sum",NUM 0,LETF("calc",[],WHILE(NOT(EQUAL(VAR "n",NUM 0)),SEQ(ASSIGN("sum",ADD(VAR "sum",VAR "n")),ASSIGN("n",SUB(VAR "n",NUM 1)))),SEQ(CALLR("calc",[]),VAR "sum"))))) => Num 15;
  (LETF("f",["n"],IF(LESS(VAR "n",NUM 2),NUM 1,ADD(CALLV("f",[SUB(VAR "n",NUM 1)]),CALLV("f",[SUB(VAR "n",NUM 2)]))),CALLV("f",[NUM 5]))) => Num 8;
  (LETV("n",NUM 10,LETF("f",["x"],IF(EQUAL(VAR "n",NUM 0),UNIT,SEQ(SEQ(ASSIGN("x",ADD(VAR "x",NUM 1)),ASSIGN("n",SUB(VAR "n",NUM 1))),CALLR("f",["x"]))),LETV("x",NUM 10,SEQ(CALLR("f",["x"]),VAR "x"))))) => Num 20;
  (LETV("x",NUM 5,LETV("y",NUM 5,LETF("f",["n"],SEQ(ASSIGN("n",ADD(VAR "n",NUM 1)),UNIT),ADD(SEQ(CALLR("f",["x"]),VAR "x"),SEQ(CALLV("f",[VAR "y"]),VAR "y")))))) => Num 11;
  (LETF("swap",["a";"b"], LETV("temp",VAR "a",SEQ(ASSIGN("a",VAR "b"),ASSIGN("b",VAR "temp"))),LETV("x",NUM 1,LETV("y",NUM 2,SEQ(CALLR("swap",["x";"y"]),VAR "x"))))) => Num 2;
  (FIELD(RECORD([("id",NUM 123);("pw",NUM 123)]),"id")) => Num 123;
  (LETV("f",RECORD([("x",TRUE);("y",FALSE)]),SEQ(ASSIGNF(VAR "f","y",NOT (NOT TRUE)),FIELD(VAR "f","y")))) => Bool true;
  (LETV("f",RECORD([("x",NUM 5);("y",NUM 7)]),LETV("x",VAR "f",SEQ(ASSIGNF(VAR "f","x",NUM 6),FIELD(VAR "x","x"))))) => Num 6;
  (RECORD([("x",NUM 1);("y",VAR "x")])) => raise UndefinedSemantics | Failure "Variable x is not included in environment";
  (LETV("x",NUM 1,LETV("f",RECORD([("x",NUM 1);("y",VAR "x")]),FIELD(VAR "f","y")))) => Num 1;
  (LETV("x",RECORD([("x",NUM 5);("y",NUM 7)]),SEQ(ASSIGNF(VAR "x","x",ADD(FIELD(VAR "x","x"),FIELD(VAR "x","y"))),FIELD(VAR "x","x")))) => Num 12;
  (LETV("f",RECORD([("x",NUM 10);("y",NUM 13)]),LETF("swap",["a";"b"],LETV("temp",VAR "a",SEQ(ASSIGN("a",VAR "b"),ASSIGN("b",VAR "temp"))),SEQ(CALLV("swap",[FIELD(VAR "f","x");FIELD(VAR "f","y")]),FIELD(VAR "f","x"))))) => Num 10;
  (LETF("f", ["x"], ADD (VAR "x", NUM 1), CALLV ("f", [NUM 1; NUM 2]))) => raise UndefinedSemantics | Failure "two lists have different length";
  (LETV("num",RECORD([("n",NUM 5);("is_even",FALSE)]),LETF("f",["n"],WHILE(EQUAL(NUM 0,FIELD(VAR "n","n")),SEQ(ASSIGNF(VAR "n","is_even",NOT(FIELD(VAR "n","is_even"))),ASSIGNF(VAR "n","n",SUB(FIELD(VAR "n","n"),NUM 1)))),SEQ(CALLR("f",["num"]),FIELD(VAR "num","is_even"))))) => Bool false;
  (LETV ("f", RECORD ([("x", NUM 10); ("y", NUM 13);("z", RECORD ([("x", NUM 110); ("y", NUM 130)]))]), FIELD ((FIELD ((VAR "f"), "z")), "x"))) => Num 110;
  (LETF ("recLookup", ["record"], LETV ("a", FIELD (VAR "record", "v1"), ADD (VAR "a", NUM 4)), CALLV ("recLookup", [RECORD [("v1", NUM 3)]]))) => Num 7;
  (LETF ("getThreeSum", ["record"], LETV ("a", FIELD (VAR "record", "v1"), LETV ("b", FIELD (VAR "record", "v2"), LETV ("c", FIELD (VAR "record", "v3"), ADD (ADD (VAR "a", VAR "b"), VAR "c")))), LETV ("r", RECORD ([("v1", MUL (NUM 1, NUM 2)); ("v2", SUB (NUM 3, NUM 4)); ("v3", ADD (NUM 5, NUM 6))]), CALLR ("getThreeSum", ["r"])))) => Num 12;
  (LETF ("isPrime", ["n"], LETV ("base", NUM 2, LETV ("primeSwitch", TRUE, LETV ("m", NUM 0, LETV ("k", WHILE (LESS (MUL (VAR "base", NUM 2), ADD (VAR "n", NUM 1)), SEQ (SEQ (ASSIGN ("m", DIV (VAR "n", VAR "base")), ASSIGN ("primeSwitch", IF (VAR "primeSwitch", NOT (EQUAL (MUL (VAR "m", VAR "base"), VAR "n")), FALSE))), ASSIGN ("base", ADD (VAR "base", NUM 1)))), VAR "primeSwitch")))),CALLV ("isPrime", [NUM 7]))) => Bool true;
  (LETF ("getThreeSum", ["record"],LETV ("a", FIELD (VAR "record", "v1"), LETV ("b", FIELD (VAR "record", "v2"), LETV ("c", FIELD (VAR "record", "v3"), ADD (ADD (VAR "a", VAR "b"), VAR "c")))), LETF ("isPrime", ["n"], LETV ("base", NUM 2, LETV ("primeSwitch", TRUE, LETV ("m", NUM 0, LETV ("k", WHILE (LESS (MUL (VAR "base", NUM 2), ADD (VAR "n", NUM 1)), SEQ (SEQ (ASSIGN ("m", DIV (VAR "n", VAR "base")), ASSIGN ("primeSwitch", IF (VAR "primeSwitch", NOT (EQUAL (MUL (VAR "m", VAR "base"), VAR "n")), FALSE))), ASSIGN ("base", ADD (VAR "base", NUM 1)))), VAR "primeSwitch")))),LETV ("r", RECORD ([("v1", MUL (NUM 1, NUM 2)); ("v2", ADD (NUM 3, NUM 4)); ("v3", DIV (NUM 6, NUM 2)); ]), LETV ("r3", CALLR ("getThreeSum", ["r"]), CALLR ("isPrime", ["r3"])))))) => Bool false;
  (LETF ("addval", ["rcd1"; "rcd2"], ADD (FIELD (VAR "rcd1", "val"), FIELD (VAR "rcd2", "val")), LETV ("a", RECORD [("val", NUM 5)], LETV ("b", RECORD [("val", NUM 8)], CALLV ("addval", [VAR "a"; VAR "b"]))))) => Num 13;
  (LETF ("swapval", ["rcd1"; "rcd2"], LETV ("temp", FIELD (VAR "rcd1", "val"), SEQ (SEQ (ASSIGNF (VAR "rcd1", "val", FIELD (VAR "rcd2", "val")), ASSIGNF (VAR "rcd2", "val", VAR "temp")), UNIT)), LETV ("a", RECORD [("val", NUM 5)], LETV ("b", RECORD [("val", NUM 8)], SEQ(CALLR ("swapval", ["a"; "b"]), FIELD (VAR "a", "val")))))) => Num 8;
  (LETF ("fact2", ["n"], LETV ("out", NUM 1, SEQ(WHILE (LESS (NUM 1, VAR "n"), SEQ (ASSIGN ("out", MUL (VAR "n", VAR "out")), ASSIGN ("n", SUB (VAR "n", NUM 2)))), VAR "out")), CALLV ("fact2", [NUM 6]))) => Num 48;
  (LETF ("fact2", ["n"], LETV ("out", NUM 1, SEQ(WHILE (LESS (NUM 1, VAR "n"), SEQ (ASSIGN ("out", MUL (VAR "n", VAR "out")), ASSIGN ("n", SUB (VAR "n", NUM 2)))), VAR "out")), CALLV ("fact2", [NUM 7]))) => Num 105;
  (LETF ("fact2", ["n"], LETV ("out", NUM 1, SEQ(WHILE (LESS (NUM 1, VAR "n"), SEQ (ASSIGN ("out", MUL (VAR "n", VAR "out")), ASSIGN ("n", SUB (VAR "n", NUM 2)))), VAR "out")), CALLV ("fact2", [NUM 1]))) => Num 1;
  (LETF ("fib", ["n"], IF (LESS (VAR "n", NUM 1), NUM 0, IF (LESS (VAR "n", NUM 2), NUM 1, ADD (CALLV ("fib", [SUB (VAR "n", NUM 1)]), CALLV ("fib", [SUB (VAR "n", NUM 2)])))), CALLV ("fib", [NUM 10]))) => Num 55;
  (LETF ("fib", ["n"], IF (LESS (VAR "n", NUM 1), NUM 0, IF (LESS (VAR "n", NUM 2), NUM 1, ADD (CALLV ("fib", [SUB (VAR "n", NUM 1)]), CALLV ("fib", [SUB (VAR "n", NUM 2)])))), CALLV ("fib", [NUM (-1)]))) => Num 0;
  (LETF ("inc", ["n"], SEQ (ASSIGN ("n", ADD (VAR "n", NUM 1)), VAR "n"), LETV ("x", NUM 1, SEQ (CALLV ("inc", [VAR "x"]), VAR "x")))) => Num 1;
  (LETF ("inc", ["n"], SEQ (ASSIGN ("n", ADD (VAR "n", NUM 1)), VAR "n"), LETV ("x", NUM 1, SEQ (CALLR ("inc", ["x"]), VAR "x")))) => Num 2;
}